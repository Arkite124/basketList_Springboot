<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.example.basketlist_springboot.Mapper.ProductMapper">
  <resultMap id="BaseResultMap" type="com.example.basketlist_springboot.Dto.Product">
    <result column="product_category" jdbcType="VARCHAR" property="productCategory" />
    <result column="product_name" jdbcType="VARCHAR" property="productName" />
    <result column="product_img_url" jdbcType="VARCHAR" property="productImgUrl" />
    <result column="product_description" jdbcType="VARCHAR" property="productDescription" />
    <result column="product_price" jdbcType="INTEGER" property="productPrice"/>
    <result column="product_quantity" jdbcType="INTEGER" property="productQuantity"/>
    <result column="product_added_at" jdbcType="TIMESTAMP" property="productAddedAt"/>
  </resultMap>
  <resultMap id="ProductWithUserNicknameResultMap" type="com.example.basketlist_springboot.Dto.Product">
    <result column="product_category" jdbcType="VARCHAR" property="productCategory" />
    <result column="product_name" jdbcType="VARCHAR" property="productName" />
    <result column="product_img_url" jdbcType="VARCHAR" property="productImgUrl" />
    <result column="product_description" jdbcType="VARCHAR" property="productDescription" />
    <result column="product_price" jdbcType="INTEGER" property="productPrice"/>
    <result column="product_quantity" jdbcType="INTEGER" property="productQuantity"/>
    <result column="product_added_at" jdbcType="TIMESTAMP" property="productAddedAt"/>
    <association property="users" javaType="com.example.basketlist_springboot.Dto.Users">
      <result column="user_nickname" jdbcType="VARCHAR" property="userNickname" />
    </association>
  </resultMap>

  <select id="selectByProductName" parameterType="string" resultMap="BaseResultMap">
    select
    *
    from product
    where PRODUCT_NAME=#{productName,jdbcType=VARCHAR}
  </select>
  <select id="selectRandomThree" resultMap="ProductWithUserNicknameResultMap">
    select * from (select p.*,u.user_nickname from product p left join users u on user_id=product_user_no
    order by DBMS_RANDOM.RANDOM)  where ROWNUM &lt;= 3
  </select>
  <select id="selectByCategory" resultMap="ProductWithUserNicknameResultMap" parameterType="map">
    select p.*,u.USER_NICKNAME from product p left join users u on p.PRODUCT_USER_NO = u.USER_ID
   <where>
       <if test="product_category!=null">
        p.PRODUCT_CATEGORY=#{category,jdbcType=VARCHAR}
       </if>
   </where>
   order by PRODUCT_ADDED_AT DESC offset #{offset,jdbcType=INTEGER} rows fetch next #{size,jdbcType=INTEGER} rows only
  </select>
  <select id="selectProductListByProductUserNickname" parameterType="string" resultMap="ProductWithUserNicknameResultMap">
    select p.*,u.USER_NICKNAME from PRODUCT p left join Users u on u.USER_ID=p.PRODUCT_USER_NO where u.USER_NICKNAME=#{userNickname,jdbcType=VARCHAR} order by PRODUCT_ADDED_AT DESC
  </select>
  <delete id="deleteByProductIdAndProductUserNo" parameterType="map">
    delete from product
    where product_id = #{productId,jdbcType=INTEGER} and product_user_no=#{productUserNo,jdbcType=INTEGER}
  </delete>
  <insert id="insertProduct" keyColumn="product_id" keyProperty="productId" parameterType="com.example.basketlist_springboot.Dto.Product" useGeneratedKeys="true">
    insert into product (
      PRODUCT_CATEGORY,
PRODUCT_NAME,
PRODUCT_IMG_URL,
PRODUCT_DESCRIPTION,
PRODUCT_PRICE,
PRODUCT_USER_NO,
PRODUCT_QUANTITY)
    values (#{productCategory,jdbcType=VARCHAR}, #{productName,jdbcType=VARCHAR}, #{productImgUrl,jdbcType=VARCHAR},
      #{productDescription,jdbcType=VARCHAR},#{productPrice,jdbcType=INTEGER}, #{productUserNo,jdbcType=INTEGER},
            #{productQuantity,jdbcType=INTEGER})
  </insert>
  <update id="updateByProductIdSelective" parameterType="com.example.basketlist_springboot.Dto.Product">
    update product p
    <set>
      <if test="productCategory != null">
        product_category = #{productCategory,jdbcType=VARCHAR},
      </if>
      <if test="productName != null">
        product_name = #{productName,jdbcType=VARCHAR},
      </if>
      <if test="productImgUrl != null">
        product_img_url = #{productImgUrl,jdbcType=VARCHAR},
      </if>
      <if test="productDescription != null">
        product_description = #{productDescription,jdbcType=VARCHAR},
      </if>
      <if test="productUserNo != null">
        product_user_no = #{productUserNo,jdbcType=INTEGER},
      </if>
      <if test="productQuantity != null">
        product_quantity = #{productQuantity,jdbcType=INTEGER},
      </if>
    </set>
    where product_id = #{productId,jdbcType=INTEGER} AND product_user_no=#{productUserNo,jdbcType=INTEGER}
  </update>
  <select id="selectByProductIdAndProductCategory" parameterType="map" resultMap="BaseResultMap">
    select * from product where product_id=#{productId} AND product_category=#{productCategory,jdbcType=VARCHAR}
  </select>
  <select id="selectProductListLikeProductName" parameterType="map" resultMap="ProductWithUserNicknameResultMap">
    select p.*,u.USER_NICKNAME from product p left join users u on p.PRODUCT_USER_NO = u.USER_ID where (p.PRODUCT_NAME like '%'||#{keyword,jdbcType=VARCHAR}||'%') order by PRODUCT_ADDED_AT DESC offset #{offset,jdbcType=INTEGER} rows fetch next #{size,jdbcType=INTEGER} rows only
  </select>
</mapper>